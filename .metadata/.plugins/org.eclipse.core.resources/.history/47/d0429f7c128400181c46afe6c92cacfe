
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <SDL.h>

using namespace std;

int main(int argc, char* argv[]) {
    // Start SDL2
    SDL_Init(SDL_INIT_EVERYTHING);


    const int SCREEN_WIDTH = 800;
    const int SCREEN_HEIGHT =  600;

    // Create a Window
    SDL_Window *window = SDL_CreateWindow("Particle Fire Explosion",
    		SDL_WINDOWPOS_UNDEFINED,SDL_WINDOWPOS_UNDEFINED,
			SCREEN_WIDTH,SCREEN_HEIGHT,SDL_WINDOW_SHOWN);

    if(window == NULL){
    	SDL_Quit();
    	return 2;
    }

    SDL_Renderer *renderer = SDL_CreateRenderer(window,-1,SDL_RENDERER_PRESENTVSYNC);

    SDL_Texture *texture = SDL_CreateTexture(renderer,SDL_PIXELFORMAT_RGBA8888,1,SCREEN_WIDTH,SCREEN_HEIGHT);

    if (renderer == NULL) {
		cout << "No Renderer!" << endl;
		SDL_DestroyWindow(window);
		SDL_Quit();
		return 3;
	}

    if (texture == NULL) {
		cout << "No texture!" << endl;
		SDL_DestroyRenderer(renderer);
		SDL_DestroyWindow(window);
		SDL_Quit();
		return 4;
	}

    //Creating ram space for pixels
    Uint32 *buffer = new Uint32[SCREEN_WIDTH*SCREEN_HEIGHT];

    memset(buffer, 0xFF , SCREEN_WIDTH/2*SCREEN_HEIGHT/2*sizeof(Uint32));

    SDL_UpdateTexture(texture, NULL, buffer, SCREEN_WIDTH*sizeof(Uint32));
    SDL_RenderClear(renderer);
    SDL_RenderCopy(renderer,texture,NULL,NULL);
    SDL_RenderPresent(renderer);

    // Delay so that we can see the window appear
    //SDL_Delay(2000);

    bool quit = false;

    SDL_Event event;

    while(!quit){

    	//Update Particles
    	//Draw Particles
    	// Check for messages/events

    	while(SDL_PollEvent(&event)){
    		if (event.type == SDL_QUIT) {
				quit = true;
			}

    	}
    }

    // Cleanup and Quit
    delete[] buffer;
    SDL_DestroyRenderer(renderer);
    SDL_DestroyTexture(texture);

    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
